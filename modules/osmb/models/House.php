<?php

namespace app\modules\osmb\models;

use Symfony\Component\Console\Tests\Output\NullOutputTest;
use Yii;
use yii\db\ActiveQuery;
use yii\helpers\Json;

/**
 * This is the model class for table "house".
 *
 * @property integer $id
 * @property string $city
 * @property string $street
 * @property string $num_house
 * @property integer $quan_app
 * @property integer $cost_on_m
 * @property integer $penalty
 * @property integer $buchg_id
 *
 * @property Appartment[] $appartments
 */
class House extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'house';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['city', 'street', 'num_house', 'quan_app', 'cost_on_m'], 'required'],
            [['quan_app', 'cost_on_m', 'penalty', 'buchg_id'], 'integer'],
            [['city'], 'string', 'max' => 45],
            [['street'], 'string', 'max' => 60],
            [['num_house'], 'string', 'max' => 20],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'city' => Yii::t('app', 'City'),
            'street' => Yii::t('app', 'Street'),
            'num_house' => Yii::t('app', 'Num_house'),
            'quan_app' => Yii::t('app', 'Quan_app'),
            'cost_on_m' => Yii::t('app', 'Cost_on_m'),
            'penalty' => Yii::t('app', 'Penalty'),
            'buchg_id' => Yii::t('app', 'Buchg ID'),
        ];
    }


    public static function find()
    {
        $find = parent::find();
        $roles = Yii::$app->authManager->getRolesByUser(Yii::$app->user->id);
        if (isset($roles['accountant'])) {
            return $find->andWhere(['buchg_id' => Yii::$app->user->id]);
        }
        return $find;
    }


    /**
     * @return \yii\db\ActiveQuery
     */
    public function getAppartments()
    {
        return $this->hasMany(Appartment::className(), ['house_id' => 'id']);
    }


    public function afterSave($insert, $changedAttributes)
    {

        if ($insert) {
            $this->batchCreateAppartments();
        }
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    /**
     * @param $house
     * @param $num
     * @throws NotFoundHttpException
     */
    public function batchCreateAppartments()
    {
        for ($i = 1; $i <= $this->quan_app; $i++) {
            $appartment = new Appartment();
            $appartment->num_app = $i;
            $appartment->house_id = $this->id;
            if (!$appartment->save()) {
                Yii::error(Json::encode($appartment->errors));
            }
        }
        return;
    }

    public function batchCreateRaschet($id)
    {

        $curr_year = (int)date('y');
        $curr_month = (int)date('m');
        if ($curr_month === 2) {
            $prev_year = $curr_year;
            $prev_month = $curr_month - 1;
            $prev_prev_year = $curr_year - 1;
            $prev_prev_month = 12;
        } elseif ($curr_month === 1) {
            $prev_year = $curr_year - 1;
            $prev_month = 12;
            $prev_prev_year = $curr_year - 1;
            $prev_prev_month = 11;
        } else {
            $prev_year = $curr_year;
            $prev_month = $curr_month - 1;
            $prev_prev_year = $curr_year;
            $prev_prev_month = $curr_month - 2;
        }
        $prev_month = str_pad($prev_month, 2, '0', STR_PAD_LEFT);
        $prev_year = str_pad($prev_year, 2, '0', STR_PAD_LEFT);

        $prev_prev_month = str_pad($prev_prev_month, 2, '0', STR_PAD_LEFT);
        $prev_prev_year = str_pad($prev_prev_year, 2, '0', STR_PAD_LEFT);


        $prev_date = $prev_year . $prev_month;
        $prev_prev_date = $prev_prev_year . $prev_prev_month;


        $result = 0;
        $appartments = Appartment::find()->where(['house_id' => $id])->all();
        foreach ($appartments as $item) {

            if (Raschet::findOne(['date' => $prev_date, 'appartment_id' => $item->id])) {

                $result = 1; //\Yii::$app->session->addFlash('warning', 'Raschet on this date exist');

            } elseif (Raschet::findOne(['date' => $prev_prev_date, 'appartment_id' => $item->id]) &&
                !Raschet::findOne(['date' => $prev_date, 'appartment_id' => $item->id])
            ) {
                $raschetPrev = Raschet::findOne(['date' => $prev_prev_date, 'appartment_id' => $item->id]);
//                Raschet::find()
//                    ->where(['appartment_id' => $item->id])
//                    ->andWhere(['like', 'phone', '%'.$item->phone . '%'])
//                    ->andWhere(['bitween', 'date', $prev_date, $curr_month])
//                    ->one();
                $result = 2;//\Yii::$app->session->addFlash('success', 'Raschet on previous month not exist, you need entred debts');
                $raschet = new Raschet();
                $raschet->nachisleno = $this->cost_on_m * $item->area;
                $raschet->appartment_id = $item->id;
                $raschet->date = $prev_date;
                $raschet->summ_subsid = 0;
                $raschet->summ_benefit = 0;
                $raschet->summ_oplata = 0;
                $raschet->summ_dolg = 0;
                if ($item->subsidStasus == 1) {
                    $raschet->summ_dolg = $raschetPrev->nachisleno + $raschetPrev->summ_dolg - $raschetPrev->summ_oplata - $raschetPrev->summ_subsid;
                } elseif (!BenefitAppartment::findAll(['appartment_id' => $item->id])) {
                    $raschet->summ_dolg = $raschetPrev->nachisleno + $raschetPrev->summ_dolg - $raschetPrev->summ_oplata;
                    var_dump("re-re");die();
                    //       $raschet->summ_benefit = 0;
                } else {
                    foreach ($benefitApp = BenefitAppartment::findAll(['appartment_id' => $item->id]) as $benefitA) {
                        $benefit = $benefitA->area_benefit * Benefit::findOne(['id' => $benefitA->benefit_id])->percent;
                        $raschet->summ_benefit = $raschet->summ_benefit + $benefit;
                    }
                    $raschet->summ_dolg = $raschetPrev->nachisleno + $raschetPrev->summ_dolg - $raschetPrev->summ_oplata - $raschetPrev->summ_benefit;
                }

                if (!$raschet->save()) {
                    Yii::error(Json::encode($raschet->errors));
                }
                $oplata = new Oplata();
                $oplata->raschet_id = $raschet->id;
                if (!$oplata->save()) {
                    Yii::error(Json::encode($oplata->errors));
                }
            } else {
                //\Yii::$app->session->addFlash('info', 'Raschet on previous month not exist, you need entred debts');
                $raschet = new Raschet();
                $raschet->nachisleno = $this->cost_on_m * $item->area;
                $raschet->appartment_id = $item->id;

                $raschet->date = $prev_prev_date;
                $raschet->summ_subsid = 0;
                $raschet->summ_benefit = 0;
                $raschet->summ_oplata = 0;
                $raschet->summ_dolg = 0;
                if ($item->subsidStasus == 1) {
                    $raschet->summ_subsid = 0;
                } else {
                    $raschet->summ_benefit = 0;
                    foreach ($benefitApp = BenefitAppartment::findAll(['appartment_id' => $item->id]) as $benefitA) {
                        $benefit = $benefitA->area_benefit * Benefit::findOne(['id' => $benefitA->benefit_id])->percent;
                        $raschet->summ_benefit += $benefit;
                    }
                }

                if (!$raschet->save()) {
                    Yii::error(Json::encode($raschet->errors));
                }
                $oplata = new Oplata();
                $oplata->raschet_id = $raschet->id;
                if (!$oplata->save()) {
                    Yii::error(Json::encode($oplata->errors));
                }
            }
        }
        return $result;
    }

}
